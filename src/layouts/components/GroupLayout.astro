---
import AnimationToggle from '../../components/AnimationToggle.astro';

const { Component, props, pageSettings } = Astro.props;
const { id, txtColor, bgColor, backgroundMedia, overlay, animations = true } = props;

// Nova lógica com 3 opções: enable_all, disable_all, custom
const globalAnimationMode = pageSettings?.animations || 'enable_all';

let shouldDisableAnimations;

switch (globalAnimationMode) {
  case 'enable_all':
    shouldDisableAnimations = false; // Sempre habilitado
    break;
  case 'disable_all':
    shouldDisableAnimations = true; // Sempre desabilitado
    break;
  case 'custom':
    shouldDisableAnimations = !animations; // Segue configuração individual
    break;
  default:
    shouldDisableAnimations = false;
}

let imgBg;
let videoBg;

if (backgroundMedia && backgroundMedia.length > 0) {
    const media = backgroundMedia[0];
    if (media.type === 'backgroundImage' && media.imgSrc) {
        imgBg = media.imgSrc;
        imgBg = /^https?:\/\//i.test(imgBg) ? imgBg : new URL(imgBg.replace(/^\/+/, ''), new URL(import.meta.env.BASE_URL, 'http://local')).pathname;
    } else if (media.type === 'backgroundVideo' && media.videoSrc) {
        videoBg = media.videoSrc;
        videoBg = /^https?:\/\//i.test(videoBg) ? videoBg : new URL(videoBg.replace(/^\/+/, ''), new URL(import.meta.env.BASE_URL, 'http://local')).pathname;
    }
}
---

<section id={id}>
    <AnimationToggle disabled={shouldDisableAnimations}>
        <Component
            txtColor={txtColor}
            bgColor={bgColor}
            imgBg={imgBg}
            videoBg={videoBg}
            overlay={overlay}
        >
            <slot />
        </Component>
    </AnimationToggle>
</section>
