---
const { Component, props } = Astro.props;
const { style, center, zoom, bearing, pitch, layers, token, views } = props;

const hasComponentData = style && token;

const mapConfig = hasComponentData ? {
    style,
    center: center ? [center.lng, center.lat] : [0, 0],
    zoom: zoom || 2,
    bearing: bearing || 0,
    pitch: pitch || 0,
    layers: layers || [],
} : null;

const mapViews = hasComponentData && views ? views.reduce((acc, view) => {
    if (view.id) {
        acc[view.id] = {
            center: view.center ? [view.center.lng, view.center.lat] : [0, 0],
            duration: view.duration || 4000,
            zoom: view.zoom || 2,
            bearing: view.bearing || 0,
            pitch: view.pitch || 0,
            layers: view.layers || [],
            mobile: view.mobile || {},
            captions: view.captions || {},
        };
    }
    return acc;
}, {}) : null;
---

<Component {...props}>
    <slot />
</Component>

{hasComponentData && (
    <script is:inline define:vars={{ mapConfig, mapViews, token }}>
        if (window.mapConfig) {
            const existingLayers = window.mapConfig.layers || [];
            const newLayers = mapConfig.layers || [];
            
            const mergedLayers = [...existingLayers];
            newLayers.forEach(newLayer => {
                if (!existingLayers.find(existing => existing.name === newLayer.name)) {
                    mergedLayers.push(newLayer);
                }
            });
            
            window.mapConfig = {
                ...mapConfig,
                ...window.mapConfig,
                layers: mergedLayers
            };
        } else {
            window.mapConfig = mapConfig;
        }
        
        window.mapBoxToken = window.mapBoxToken || token;
        
        if (mapViews) {
            window.mapViews = { ...mapViews, ...(window.mapViews || {}) };
        }
    </script>
)}
