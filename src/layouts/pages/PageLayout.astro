---
import { getEntryBySlug } from 'astro:content';

import Layout from "./Layout.astro";
import MapBox from '../../components/MapBox.astro';
import Group from '../../components/Group.astro';
import ColumnSticky from '../../components/ColumnSticky.astro';
import Text from '../../components/Text.astro';
import Cta from '../../components/Cta.astro';
import CardsCall from '../../components/CardsCall.astro';
import Cards from '../../components/Cards.astro';
import ChartBar from '../../components/ChartBar.astro';
import ChartPercentage from '../../components/ChartPercentage.astro';
import Column from '../../components/Column.astro';
import Columns from '../../components/Columns.astro';
import ImageBlock from '../../components/ImageBlock.astro';
import InnerColumns from '../../components/InnerColumns.astro';
import LogosGroup from '../../components/LogosGroup.astro';
import VideoEmbed from '../../components/VideoEmbed.astro';
import HtmlEmbed from '../../components/HtmlEmbed.astro';
import Map from '../../components/Map.astro';
import MapView from '../../components/MapView.astro';
import Spacer from '../../components/Spacer.astro';
import Timeline from '../../components/Timeline.astro';
import TimelineBullet from '../../components/TimelineBullet.astro';
import BigNumbers from '../../components/BigNumbers.astro';
import Compare from '../../components/Compare.astro';
import Pullquote from '../../components/Pullquote.astro';
import Gallery from '../../components/Gallery.astro';
import Slider from '../../components/Slider.astro';
import Menu from "../../components/Menu.astro";

const { slug } = Astro.props;

// Carregando dados e definindo variáveis no frontmatter
const entry = await getEntryBySlug('pages', slug);
if (!entry) {
  throw new Error(`Nenhuma entrada encontrada para "${slug}".`);
}

const { title, components, mapbox, pageSettings } = entry.data;

// Configuração do MapBox baseada nos dados da página
const hasMapboxData = mapbox && mapbox.style && mapbox.token;

// Função para processar string de filtro no formato "property==value"
function parseFilterString(filterStr) {
  if (!filterStr) return null;
  
  // Operadores suportados (ordem importa - operadores maiores primeiro)
  const operators = ['==', '!=', '<=', '>=', '<', '>', 'in', '!in', 'has', '!has'];
  
  for (const op of operators) {
    if (filterStr.includes(op)) {
      const parts = filterStr.split(op);
      if (parts.length === 2) {
        const key = parts[0].trim();
        let value = parts[1].trim();
        
        // Operadores que não precisam de valor
        if (op === 'has' || op === '!has') {
          return [op, key];
        }
        
        // Operadores 'in' e '!in' esperam arrays
        if (op === 'in' || op === '!in') {
          const values = value.split(',').map(v => {
            v = v.trim();
            // Converter para número se possível
            return !isNaN(v) && v !== '' ? parseFloat(v) : v;
          });
          return [op, ['get', key], values];
        }
        
        // Converter valor para número se possível
        if (!isNaN(value) && value !== '') {
          value = parseFloat(value);
        }
        
        return [op, ['get', key], value];
      }
    }
  }
  
  return null;
}

// Função para processar layers com suporte a formato string e objeto
function processLayerString(layerInput) {
  if (typeof layerInput === 'string') {
    // Novo formato: "layerName[property==value]"
    if (layerInput.includes('[') && layerInput.includes(']')) {
      const bracketStart = layerInput.indexOf('[');
      const bracketEnd = layerInput.indexOf(']');
      
      const name = layerInput.substring(0, bracketStart);
      const filterStr = layerInput.substring(bracketStart + 1, bracketEnd);
      const filter = parseFilterString(filterStr);
      
      return { name, filter };
    }
    
    // Formato simples: "layerName"
    return { name: layerInput, filter: null };
  }
  
  // Formato objeto (compatibilidade com versão anterior)
  if (typeof layerInput === 'object' && layerInput.name) {
    const processedLayer = {
      name: layerInput.name,
      filter: null
    };
    
    // Gerar filtro se todos os campos necessários estão preenchidos
    if (layerInput.filterKey && layerInput.comparison && layerInput.filterValue !== undefined && layerInput.filterValue !== '') {
      let filterValue = layerInput.filterValue;
      
      // Converter valor para número se possível
      if (!isNaN(filterValue) && filterValue !== '') {
        filterValue = parseFloat(filterValue);
      }
      
      // Construir filtro baseado no tipo de comparação
      if (layerInput.comparison === 'has' || layerInput.comparison === '!has') {
        processedLayer.filter = [layerInput.comparison, layerInput.filterKey];
      } else if (layerInput.comparison === 'in' || layerInput.comparison === '!in') {
        // Para 'in' e '!in', o valor deve ser um array
        const values = Array.isArray(filterValue) ? filterValue : [filterValue];
        processedLayer.filter = [layerInput.comparison, ['get', layerInput.filterKey], values];
      } else {
        processedLayer.filter = [layerInput.comparison, ['get', layerInput.filterKey], filterValue];
      }
    }
    
    return processedLayer;
  }
  
  return { name: layerInput, filter: null };
}

// Função para processar layers e seus filtros
function processLayers(layers) {
  if (!layers) return [];
  
  // Se layers é uma string (formato novo), converter para array
  if (typeof layers === 'string') {
    const layerLines = layers.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    return layerLines.map(processLayerString).filter(layer => layer.name);
  }
  
  // Se layers é um array (formato antigo), processar normalmente
  if (Array.isArray(layers)) {
    return layers.map(processLayerString).filter(layer => layer.name);
  }
  
  return [];
}

// Processar dados do mapbox se existirem
let mapboxConfig = null;
let mapboxViews = {};

if (hasMapboxData) {
  // Suporte para ambos os formatos: novo (centerLng/centerLat) e antigo (center.lng/center.lat)
  const centerLng = mapbox.centerLng || mapbox.center?.lng || 0;
  const centerLat = mapbox.centerLat || mapbox.center?.lat || 0;
  
  mapboxConfig = {
    style: mapbox.style,
    center: [parseFloat(centerLng), parseFloat(centerLat)],
    zoom: parseFloat(mapbox.zoom) || 2,
    bearing: parseFloat(mapbox.bearing) || 0,
    pitch: parseFloat(mapbox.pitch) || 0,
    layers: processLayers(mapbox.layers),
  };
  
  if (mapbox.views && Array.isArray(mapbox.views)) {
    mapbox.views.forEach(view => {
      if (view.id) {
        // Suporte para ambos os formatos nas views também
        const viewCenterLng = view.centerLng || view.center?.lng || 0;
        const viewCenterLat = view.centerLat || view.center?.lat || 0;
        
        // Processar captions para gerar HTML dos ícones
        let processedCaptions = view.captions || {};
        if (view.captions && view.captions.items) {
          processedCaptions = {
            ...view.captions,
            items: view.captions.items.map(item => {
              if (item.icon && item.colorIcon && item.typeIcon) {
                // Gerar HTML do ícone usando os novos campos
                const iconHtml = `<span class="material-symbols-${item.typeIcon}" style="color: ${item.colorIcon}">${item.icon}</span>`;
                return {
                  ...item,
                  icon: iconHtml
                };
              }
              return item;
            })
          };
        }

        mapboxViews[view.id] = {
          center: [parseFloat(viewCenterLng), parseFloat(viewCenterLat)],
          duration: parseFloat(view.duration) || 4000,
          zoom: parseFloat(view.zoom) || 2,
          bearing: parseFloat(view.bearing) || 0,
          pitch: parseFloat(view.pitch) || 0,
          layers: processLayers(view.layers),
          mobile: view.mobile || {},
          captions: processedCaptions,
        };
      }
    });
  }
}

const componentMap = {
  Group,
  ColumnSticky,
  Text,
  Cta,
  Cards,
  CardsCall,
  ChartBar,
  ChartPercentage,
  Column,
  Columns,
  ImageBlock,
  InnerColumns,
  LogosGroup,
  VideoEmbed,
  HtmlEmbed,
  Map,
  MapView,
  Spacer,
  Timeline,
  TimelineBullet,
  BigNumbers,
  Compare,
  Pullquote,
  Gallery,
  Slider
};

const languages = [
  {
    slug: "PT",
    url: pageSettings?.link_pt_br || "#",
  },
  {
    slug: "EN",
    url: pageSettings?.link_en || "#",
  },
  {
    slug: "ES",
    url: pageSettings?.link_es || "#",
  },
];

const mainMenu = components
  ? components
      .filter(component => component.id && component.showInMenu === true)
      .map(component => ({
        text: component.longTitle || component.shortTitle,
        url: `#${component.id}`,
      }))
  : [];
---

<Layout title={title} pageTheme={entry.data?.pageTheme}>
  <main>
    <Menu
      languages={languages}
      menu={mainMenu}
      sideLink={"https://documental.xyz"}
    />
    {hasMapboxData && <MapBox />}
    {
      (async function() {
        async function renderComponents(componentList) {
          if (!componentList) return [];

          const results = await Promise.all(componentList.map(async ({ type, components: childComponents, txtColor, bgColor, ...restProps }) => {
            const Component = componentMap[type];
            if (!Component) return null;

            const themeColors = entry.data?.pageTheme || {};

            const replaceColor = (color) => {
              if (color === 'Primary') return themeColors?.primaryColor;
              if (color === 'Secondary') return themeColors?.secondaryColor;
              if (color === 'Highlight') return themeColors?.highlightColor;
              if (color === '') return 'transparent';
              return color;
            };

            const props = {
              ...restProps,
              txtColor: txtColor === 'Custom' ? restProps.customTxtColor : replaceColor(txtColor),
              bgColor: bgColor === 'Custom' ? restProps.customBgColor : replaceColor(bgColor),
            };

            if (type === 'InnerColumns') {
              const column1 = restProps.column1;
              const column2 = restProps.column2;
              
              return (
                <InnerColumns>
                  <Fragment slot="column-1">
                    { renderComponents(column1.components)}
                  </Fragment>
                  <Fragment slot="column-2">
                    {renderComponents(column2.components)}
                  </Fragment>
                </InnerColumns>
              );
            }

            if (type === 'Columns') {
              const column1 = restProps.column1;
              const column2 = restProps.column2;
              const paddingTop = restProps.paddingTop;
              const paddingBottom = restProps.paddingBottom;
              const invertOnMobile = restProps.invertOnMobile;
              const alignment = restProps.columnsAlign;
 
              return (
                <Columns paddingTop={paddingTop} paddingBottom={paddingBottom} invertOnMobile={invertOnMobile} alignment={alignment}>
                  <Fragment slot="column-1">
                    { renderComponents(column1.components)}
                  </Fragment>
                  <Fragment slot="column-2">
                    {renderComponents(column2.components)}
                  </Fragment>
                </Columns>
              );
            }

            let Layout = null;
            try {
              const layoutModule = await import(`../components/${type}Layout.astro`);
              Layout = layoutModule.default;
            } catch (e) {
            }

            const children = childComponents ? await renderComponents(childComponents) : [];

            if (Layout) {
              return (
                <Layout Component={Component} props={props}>
                  {children}
                </Layout>
              );
            } else {
              return (
                <Component {...props}>
                  {children}
                </Component>
              );
            }
          }));

          return results;
        }
  
        return await renderComponents(components);
      })()
    }
  </main>
</Layout>

{hasMapboxData && (
  <script is:inline define:vars={{ mapboxConfig, mapboxViews, mapbox }}>
    // Configuração do MapBox baseada nos dados processados
    window.mapConfig = mapboxConfig;
    window.mapBoxToken = mapbox.token;
    window.mapViews = mapboxViews;
  </script>
)}
