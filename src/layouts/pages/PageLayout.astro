---
import { getEntryBySlug } from 'astro:content';

import Layout from "./Layout.astro";
import MapBox from '../../components/MapBox.astro';
import Group from '../../components/Group.astro';
import ColumnSticky from '../../components/ColumnSticky.astro';
import Text from '../../components/Text.astro';
import Cta from '../../components/Cta.astro';
import CardsCall from '../../components/CardsCall.astro';
import Cards from '../../components/Cards.astro';
import ChartBar from '../../components/ChartBar.astro';
import ChartPercentage from '../../components/ChartPercentage.astro';
import Column from '../../components/Column.astro';
import Columns from '../../components/Columns.astro';
import ImageBlock from '../../components/ImageBlock.astro';
import InnerColumns from '../../components/InnerColumns.astro';
import LogosGroup from '../../components/LogosGroup.astro';
import VideoEmbed from '../../components/VideoEmbed.astro';
import HtmlEmbed from '../../components/HtmlEmbed.astro';
import Map from '../../components/Map.astro';
import MapView from '../../components/MapView.astro';
import Spacer from '../../components/Spacer.astro';
import Timeline from '../../components/Timeline.astro';
import TimelineBullet from '../../components/TimelineBullet.astro';
import BigNumbers from '../../components/BigNumbers.astro';
import Compare from '../../components/Compare.astro';
import Pullquote from '../../components/Pullquote.astro';
import Gallery from '../../components/Gallery.astro';
import Slider from '../../components/Slider.astro';
import Menu from "../../components/Menu.astro";

const { slug } = Astro.props;

// Carregando dados e definindo variáveis no frontmatter
const entry = await getEntryBySlug('pages', slug);
if (!entry) {
  throw new Error(`Nenhuma entrada encontrada para "${slug}".`);
}

const { title, components, mapbox, pageSettings } = entry.data;

// Configuração do MapBox baseada nos dados da página
const hasMapboxData = mapbox && mapbox.style && mapbox.token;

const componentMap = {
  Group,
  ColumnSticky,
  Text,
  Cta,
  Cards,
  CardsCall,
  ChartBar,
  ChartPercentage,
  Column,
  Columns,
  ImageBlock,
  InnerColumns,
  LogosGroup,
  VideoEmbed,
  HtmlEmbed,
  Map,
  MapView,
  Spacer,
  Timeline,
  TimelineBullet,
  BigNumbers,
  Compare,
  Pullquote,
  Gallery,
  Slider
};

const languages = [
  {
    slug: "PT",
    url: pageSettings?.link_pt_br || "#",
  },
  {
    slug: "EN",
    url: pageSettings?.link_en || "#",
  },
  {
    slug: "ES",
    url: pageSettings?.link_es || "#",
  },
];

const mainMenu = components
  ? components
      .filter(component => component.id && component.showInMenu === true)
      .map(component => ({
        text: component.longTitle || component.shortTitle,
        url: `#${component.id}`,
      }))
  : [];
---

<Layout title={title} pageTheme={entry.data?.pageTheme}>
  <main>
    <Menu
      languages={languages}
      menu={mainMenu}
      sideLink={"https://documental.xyz"}
    />
    {hasMapboxData && <MapBox />}
    {
      (async function() {
        async function renderComponents(componentList) {
          if (!componentList) return [];

          const results = await Promise.all(componentList.map(async ({ type, components: childComponents, txtColor, bgColor, ...restProps }) => {
            const Component = componentMap[type];
            if (!Component) return null;

            const themeColors = entry.data?.pageTheme || {};

            const replaceColor = (color) => {
              if (color === 'Primary') return themeColors?.primaryColor;
              if (color === 'Secondary') return themeColors?.secondaryColor;
              if (color === 'Highlight') return themeColors?.highlightColor;
              if (color === '') return 'transparent';
              return color;
            };

            const props = {
              ...restProps,
              txtColor: txtColor === 'Custom' ? restProps.customTxtColor : replaceColor(txtColor),
              bgColor: bgColor === 'Custom' ? restProps.customBgColor : replaceColor(bgColor),
            };

            if (type === 'InnerColumns') {
              const column1 = restProps.column1;
              const column2 = restProps.column2;
              
              return (
                <InnerColumns>
                  <Fragment slot="column-1">
                    { renderComponents(column1.components)}
                  </Fragment>
                  <Fragment slot="column-2">
                    {renderComponents(column2.components)}
                  </Fragment>
                </InnerColumns>
              );
            }

            if (type === 'Columns') {
              const column1 = restProps.column1;
              const column2 = restProps.column2;
              const paddingTop = restProps.paddingTop;
              const paddingBottom = restProps.paddingBottom;
              const invertOnMobile = restProps.invertOnMobile;
              const alignment = restProps.columnsAlign;
 
              return (
                <Columns paddingTop={paddingTop} paddingBottom={paddingBottom} invertOnMobile={invertOnMobile} alignment={alignment}>
                  <Fragment slot="column-1">
                    { renderComponents(column1.components)}
                  </Fragment>
                  <Fragment slot="column-2">
                    {renderComponents(column2.components)}
                  </Fragment>
                </Columns>
              );
            }

            let Layout = null;
            try {
              const layoutModule = await import(`../components/${type}Layout.astro`);
              Layout = layoutModule.default;
            } catch (e) {
            }

            const children = childComponents ? await renderComponents(childComponents) : [];

            if (Layout) {
              return (
                <Layout Component={Component} props={props}>
                  {children}
                </Layout>
              );
            } else {
              return (
                <Component {...props}>
                  {children}
                </Component>
              );
            }
          }));

          return results;
        }
  
        return await renderComponents(components);
      })()
    }
  </main>
</Layout>

{hasMapboxData && (
  <script is:inline define:vars={{ mapbox }}>
    // Configuração do MapBox baseada nos dados da página
    window.mapConfig = {
      style: mapbox.style,
      center: [mapbox.center?.lng || 0, mapbox.center?.lat || 0],
      zoom: mapbox.zoom || 2,
      bearing: mapbox.bearing || 0,
      pitch: mapbox.pitch || 0,
      layers: mapbox.layers || [],
    };
    
    window.mapBoxToken = mapbox.token;
    
    // Processamento das views do mapa
    window.mapViews = {};
    if (mapbox.views && Array.isArray(mapbox.views)) {
      mapbox.views.forEach(view => {
        if (view.id) {
          window.mapViews[view.id] = {
            center: [view.center?.lng || 0, view.center?.lat || 0],
            duration: view.duration || 4000,
            zoom: view.zoom || 2,
            bearing: view.bearing || 0,
            pitch: view.pitch || 0,
            layers: view.layers || [],
            mobile: view.mobile || {},
            captions: view.captions || {},
          };
        }
      });
    }
  </script>
)}
