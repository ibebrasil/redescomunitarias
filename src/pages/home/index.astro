---
import { getEntryBySlug } from 'astro:content';

import Layout from "../../layouts/Layout.astro";
import MapBox from '../../components/MapBox.astro';
import Group from '../../components/Group.astro';
import ColumnSticky from '../../components/ColumnSticky.astro';
import Text from '../../components/Text.astro';
import Cta from '../../components/Cta.astro';
import CardsCall from '../../components/CardsCall.astro';
import Cards from '../../components/Cards.astro';
import ChartBar from '../../components/ChartBar.astro';
import ChartPercentage from '../../components/ChartPercentage.astro';
import Column from '../../components/Column.astro';
import Columns from '../../components/Columns.astro';
import ImageBlock from '../../components/ImageBlock.astro';
import InnerColumns from '../../components/InnerColumns.astro';
import LogosGroup from '../../components/LogosGroup.astro';
import VideoEmbed from '../../components/VideoEmbed.astro';
import Map from '../../components/Map.astro';
import MapView from '../../components/MapView.astro';
import Spacer from '../../components/Spacer.astro';
import Timeline from '../../components/Timeline.astro';
import TimelineBullet from '../../components/TimelineBullet.astro';
import BigNumbers from '../../components/BigNumbers.astro';
import Compare from '../../components/Compare.astro';
import Pullquote from '../../components/Pullquote.astro';
import Gallery from '../../components/Gallery.astro';
import Slider from '../../components/Slider.astro';
import { getEntryBySlug } from 'astro:content';
import Menu from "../../components/Menu.astro";

// Apenas carregando dados e definindo variáveis no frontmatter
const entry = await getEntryBySlug('pages', 'home');
if (!entry) {
  throw new Error('Nenhuma entrada encontrada para "home".');
}

const { title, components } = entry.data;

const componentMap = {
  Group,
  ColumnSticky,
  Text,
  Cta,
  Cards,
  CardsCall,
  ChartBar,
  ChartPercentage,
  Column,
  Columns,
  ImageBlock,
  InnerColumns,
  LogosGroup,
  VideoEmbed,
  Map,
  MapView,
  Spacer,
  Timeline,
  TimelineBullet,
  BigNumbers,
  Compare,
  Pullquote,
  Gallery,
  Slider
};

const languages = [
  {
    slug: "EN",
    url: "#",
  },
  {
    slug: "ES",
    url: "#",
  },
  {
    slug: "PT",
    url: "#",
  },
];

const mainMenu = components
  ? components
      .filter(component => component.id)
      .map(component => ({
        text: component.id,
        url: `#${component.id}`,
      }))
  : [];
---

  <Layout title="Documental.xyz">
    <main>
      <!-- MENU -->
      <Menu
        languages={languages}
        menu={mainMenu}
        sideLink={"https://documental.xyz"}
      />
      <MapBox />
    {
      // Toda a lógica de renderização fica aqui, no template.
      // Não usamos <script> separado, mas a lógica não está no frontmatter.
      // Ela está após o frontmatter, no corpo do template, o que é permitido.
      (async function() {
        async function renderComponents(componentList) {
          if (!componentList) return [];

          const results = await Promise.all(componentList.map(async ({ type, components: childComponents, txtColor, bgColor, ...restProps }) => {
            const Component = componentMap[type];
            if (!Component) return null;

            const themeColors = entry.data?.pageTheme || {};

            const replaceColor = (color) => {
              if (color === 'Primary') return themeColors?.primaryColor;
              if (color === 'Secondary') return themeColors?.secondaryColor;
              if (color === 'Highlight') return themeColors?.highlightColor;
              if (color === '') return 'transparent';
              return color;
            };

            const props = {
              ...restProps,
              txtColor: replaceColor(txtColor),
              bgColor: replaceColor(bgColor),
            };

            if (type === 'InnerColumns') {
              const column1 = restProps.column1;
              const column2 = restProps.column2;
              
              return (
                <InnerColumns>
                  <Fragment slot="column-1">
                    { renderComponents(column1.components)}
                  </Fragment>
                  <Fragment slot="column-2">
                    {renderComponents(column2.components)}
                  </Fragment>
                </InnerColumns>
              );
            }

            if (type === 'Columns') {
              const column1 = restProps.column1;
              const column2 = restProps.column2;
              const paddingTop = restProps.paddingTop;
              const paddingBottom = restProps.paddingBottom;
              const invertOnMobile = restProps.invertOnMobile;
              const alignment = restProps.columnsAlign;
 
              return (
                <Columns paddingTop={paddingTop} paddingBottom={paddingBottom} invertOnMobile={invertOnMobile} alignment={alignment}>
                  <Fragment slot="column-1">
                    { renderComponents(column1.components)}
                  </Fragment>
                  <Fragment slot="column-2">
                    {renderComponents(column2.components)}
                  </Fragment>
                </Columns>
              );
            }


            
            let Layout = null;
            try {
              const layoutModule = await import(`../../layouts/${type}Layout.astro`);
              Layout = layoutModule.default;
            } catch (e) {
              // Caso não encontre o layout específico, seguirá sem layout.
            }

            const children = childComponents ? await renderComponents(childComponents) : [];

            if (Layout) {
              // Se houver um layout específico, use-o
              return (
                <Layout Component={Component} props={props}>
                  {children}
                </Layout>
              );
            } else {
              // Caso contrário, renderize o componente diretamente
              return (
                <Component {...props}>
                  {children}
                </Component>
              );
            }
          }));

          return results;
        }
  

        // Renderiza as seções
        return await renderComponents(components);
      })()
    }




</main>


</style>
</Layout>
  </body>
</html>
