@use "sass:map";
@use "sass:list";
@use './functions' as *;
@use './breakpoints' as *;
@use './type' as *;
@use './colors' as *;

//MIXINS
//varname: gera uma variável no escopo css ao adicionar o tamanho
@mixin fontSize($px,$varname: false, $root: false, $responsive: false){
	@if($varname == false){
		font-size: $px*1px;
		font-size: pxToRem($px);
		@if($responsive == true){ font-size: pxToVw($px);}
	}@else{
		@if($root != false){
			#{--#{$type-var-prefix}-#{$varname}-fs-px}: $px*1px;
			#{--#{$type-var-prefix}-#{$varname}-fs-rem}: pxToRem($px);
			@if($responsive == true){ #{--#{$type-var-prefix}-#{$varname}-fs-vw}: pxToVw($px) };
		}@else{
			font-size: $px*1px;
			font-size: var(--#{$type-var-prefix}-#{$varname}-fs-px,$px*1px);
			font-size: var(--#{$type-var-prefix}-#{$varname}-fs-rem,pxToRem($px));
			@if($responsive == true){ font-size:var(--#{$type-var-prefix}-#{$varname}-fs-vw,pxToVw($px)) };
		}
	}
}

@mixin lineHeight($pt, $varname:false, $root: false ){
	@if($varname == false){
			line-height: calc( round($pt * 1000) / 1000 );
	}@else{
			@if($root != false){
					#{--#{$type-var-prefix}-#{$varname}-lh}: calc( round($pt * 1000) / 1000 );
			}@else{
					line-height: var(--#{$type-var-prefix}-#{$varname}-lh, calc( round($pt * 1000) / 1000) );
			}
	}
}

//insira a porcentagem conforme XD, aceita negativos
@mixin letterSpacing($fontSizeInPx,$letterSpacingPercentage,$varname: false, $root: false, $responsive: false){
	$ls: calc($fontSizeInPx / 100 ) * $letterSpacingPercentage;

	@if($varname == false){
		letter-spacing: $ls * 1px;
		letter-spacing: pxToRem($ls);
	@if($responsive == true){ letter-spacing: pxToVw($ls);}
	}@else{
		@if($root != false){
			#{--#{$type-var-prefix}-#{$varname}-ls-px}: $ls * 1px;
			#{--#{$type-var-prefix}-#{$varname}-ls-rem}: pxToRem($ls);
			@if($responsive == true){ #{--#{$type-var-prefix}-#{$varname}-ls-vw}: pxToVw($ls);}
		}@else{
			letter-spacing: $ls * 1px;
			letter-spacing: var(--#{$type-var-prefix}-#{$varname}-ls-px,$ls * 1px);
			letter-spacing: var(--#{$type-var-prefix}-#{$varname}-ls-rem,pxToRem($ls));
			@if($responsive == true){ letter-spacing: var(--#{$type-var-prefix}-#{$varname}-ls-vw,pxToVw($ls)); }
		}
	}
}

@mixin defineFont($varName: false, $fontSizePx: false, $lineHeight: false, $letterSpacing: false, $root: false, $responsive: false){
	@if( $fontSizePx != false ) { @include fontSize($fontSizePx,$varName,$root,$responsive) };
	@if( $lineHeight != false ) { @include lineHeight($lineHeight,$varName,$root) };
	@if( $letterSpacing != false and $fontSizePx != false ) { @include letterSpacing($fontSizePx, $letterSpacing, $varName, $root, $responsive) };
}

//renderiza variáveis de acordo com objeto types no root
@mixin typeVars($types:$types){
	@each $type,$rows in $types{
		$varName: $type;

		@each $row in $rows{
			$fontSize: false;
			$lineHeight: false;
			$letterSpacing: false;
			$responsive: false;

			@if( map.get($map: $row, $key: 'font-size') ){$fontSize: map.get($map: $row, $key: 'font-size')};
			@if( map.get($map: $row, $key: 'line-height') ){$lineHeight: map.get($map: $row, $key: 'line-height')};
			@if( map.get($map: $row, $key: 'letter-spacing') ){$letterSpacing: map.get($map: $row, $key: 'letter-spacing')};
			@if( map.get($map: $row, $key: 'responsive') ){$responsive: map.get($map: $row, $key: 'responsive')};

			@if( map.get($map: $row, $key: 'break') == false){
				@include defineFont($varName, $fontSize, $lineHeight, $letterSpacing, true, $responsive);
			}@else{
				$break: map.get($map: $row, $key: 'break');
				$varNameSufix: $varName + '-' + map.get($map: $break, $key: 'mixin') + '-' + str-replace(map.get($map: $break, $key: 'point'),',','-');
				@include defineFont($varNameSufix, $fontSize, $lineHeight, $letterSpacing, true, $responsive );
			}
		}
	}
}

//usado para definir fontes
@mixin type($name){
	$type: map.get($map: $types, $key: $name);

	@if($type == null){ @error '-> "' + #{$name} + '" not defined at config/type.scss'; }

	@each $row in $type{
		$fontSize: false;
		$lineHeight: false;
		$letterSpacing: false;
		$responsive: false;

		@if( map.get($map: $row, $key: 'font-size') ){$fontSize: map.get($map: $row, $key: 'font-size')};
		@if( map.get($map: $row, $key: 'line-height') ){$lineHeight: map.get($map: $row, $key: 'line-height')};
		@if( map.get($map: $row, $key: 'letter-spacing') ){$letterSpacing: map.get($map: $row, $key: 'letter-spacing')};
		@if( map.get($map: $row, $key: 'responsive') ){$responsive: map.get($map: $row, $key: 'responsive')};

		$break: map.get($map: $row, $key: 'break');
		@if( $break == false){
			@include defineFont($name, $fontSize,  $lineHeight, $letterSpacing, false, $responsive);
			@include typeValues($row);
		}

		@if( $break != false and map.get($map: $break, $key: 'mixin') == 'down'){
			@include media-break-down( map.get($map: $break, $key: 'point'), map.get($map: $break, $key: 'vars')){
				$varNameSufix: $name + '-' + map.get($map: $break, $key: 'mixin') + '-' + map.get($map: $break, $key: 'point');
				@include defineFont($varNameSufix, $fontSize,  $lineHeight, $letterSpacing, false, $responsive);
				@include typeValues($row);
			};
		}

		@if( $break != false and map.get($map: $break, $key: 'mixin') == 'up'){
			@include media-break-up( map.get($map: $break, $key: 'point'), map.get($map: $break, $key: 'vars')){
				$varNameSufix: $name + '-' + map.get($map: $break, $key: 'mixin') + '-' + map.get($map: $break, $key: 'point');
				@include defineFont($varNameSufix, $fontSize,  $lineHeight, $letterSpacing, false, $responsive);
				@include typeValues($row);
			};
		}

		@if( $break != false and map.get($map: $break, $key: 'mixin') == 'between'){
			@include media-break-between( list.nth(str-split(map.get($map: $break, $key: 'point'),','),1), list.nth(str-split(map.get($map: $break, $key: 'point'),','),2), map.get($map: $break, $key: 'vars')){
				$varNameSufix: $name + '-' + map.get($map: $break, $key: 'mixin') + '-' + str-replace(map.get($map: $break, $key: 'point'),',','-');
				@include defineFont($varNameSufix, $fontSize,  $lineHeight, $letterSpacing, false, $responsive);
				@include typeValues($row);
			};
		}
	}
}	


//usado para pegar valores de type
@mixin typeValues($row){
	@each $key,$val in $row{
		@if($key != 'font-size' and $key != 'line-height' and $key != 'letter-spacing' and $key != 'break' and $key != 'responsive'){
			#{$key}: $val;
		}
	}
}

@mixin media-break-up($breakname,$breakpoints: $breakpoints) {
	$this_break: map.get($map: $breakpoints, $key: $breakname);
	$break-px: map.get($map: $this_break, $key: 'breakpoint');;

	@media (min-width: $break-px) {
			@content;
	}
}

@mixin media-break-down($breakname,$breakpoints: $breakpoints) {
	$this_break: map.get($map: $breakpoints, $key: $breakname);
	$break-px: map.get($map: $this_break, $key: 'breakpoint') - 1px;

	@media (max-width: $break-px) {
			@content;
	}
}

@mixin media-break-between($breakname-lower, $breakname-upper,$breakpoints: $breakpoints) {
	$break-down: map.get($map: $breakpoints, $key: $breakname-lower);
	$break-down: map.get($map: $break-down, $key: 'breakpoint');
	$break-up: map.get($map: $breakpoints, $key: $breakname-upper);
	$break-up: map.get($map: $break-up, $key: 'breakpoint') - 1px;

	@media (min-width: $break-down ) and (max-width: $break-up ) {
			@content;
	}
}

// insere as varáveis das cores definidas
@mixin print_colors_vars( $colors: $colors, $user_system_prefs: false){
  @each $name, $arr in $colors {
    --#{$color-var-prefix}-#{$name}: #{list.nth($arr,1)};
    --#{$color-var-prefix}-#{$name}-rgb: #{hex_to_rgb_values(list.nth($arr,1))};
  }

  &[darkmode] {
    @each $name,$arr in $colors {
      --#{$color-var-prefix}-#{$name}: #{list.nth($arr,2)};
      --#{$color-var-prefix}-#{$name}-rgb: #{hex_to_rgb_values((list.nth($arr,2)))};
    }
  }

  @if($user_system_prefs) {
    @media (prefers-color-scheme: dark) {
      @each $name,$arr in $colors {
        --#{$color-var-prefix}-#{$name}: #{list.nth($arr,2)};
        --#{$color-var-prefix}-#{$name}-rgb: #{hex_to_rgb_values((list.nth($arr,2)))};
      }
    }
  }
}

